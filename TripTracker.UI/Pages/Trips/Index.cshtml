@page
@model TripTracker.UI.Pages.Trips.IndexModel
@inject SignInManager<ApplicationUser> SignInManager
@inject Microsoft.AspNetCore.Authorization.IAuthorizationService Auth
@using Microsoft.AspNetCore.Authorization
@{
    ViewData["Title"] = "Index";
    var canCreateTrips = await Auth.AuthorizeAsync(User, null, "CreateTrips");
}

<h2>Index</h2>
@if (canCreateTrips == AuthorizationResult.Success())
{
    <p>
        <a asp-page="Create">Create New</a>
    </p>
}
@*@if (SignInManager.IsSignedIn(User))
    {

    }*@

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Trips[0].Name)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Trips[0].StartDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Trips[0].EndDate)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model.Trips)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EndDate)
                </td>
                <td>
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <a asp-page="./Edit" asp-route-id="@item.Id">Edit</a> @:|
                        <a asp-page="./Details" asp-route-id="@item.Id">Details</a> @:|
                        <a asp-page="./Delete" asp-route-id="@item.Id">Delete</a>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>
